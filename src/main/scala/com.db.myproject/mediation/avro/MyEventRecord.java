/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.db.myproject.mediation.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MyEventRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 557087927762503136L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyEventRecord\",\"namespace\":\"com.db.myproject.mediation.avro\",\"fields\":[{\"name\":\"Event\",\"type\":{\"type\":\"record\",\"name\":\"Event\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"transactionId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"nhubTimestamp\",\"type\":[\"null\",\"long\"],\"default\":null}],\"default\":null}},{\"name\":\"Customer\",\"type\":{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fullName\",\"type\":[\"null\",\"string\"],\"default\":null}],\"default\":null}},{\"name\":\"Notification\",\"type\":{\"type\":\"record\",\"name\":\"Notification\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"message\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"retries\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"nhubSuccess\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"successDescr\",\"type\":[\"null\",\"string\"],\"default\":null}],\"default\":null}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MyEventRecord> ENCODER =
      new BinaryMessageEncoder<MyEventRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MyEventRecord> DECODER =
      new BinaryMessageDecoder<MyEventRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MyEventRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MyEventRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MyEventRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MyEventRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MyEventRecord from a ByteBuffer. */
  public static MyEventRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.db.myproject.mediation.avro.Event Event;
  @Deprecated public com.db.myproject.mediation.avro.Customer Customer;
  @Deprecated public com.db.myproject.mediation.avro.Notification Notification;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MyEventRecord() {}

  /**
   * All-args constructor.
   * @param Event The new value for Event
   * @param Customer The new value for Customer
   * @param Notification The new value for Notification
   */
  public MyEventRecord(com.db.myproject.mediation.avro.Event Event, com.db.myproject.mediation.avro.Customer Customer, com.db.myproject.mediation.avro.Notification Notification) {
    this.Event = Event;
    this.Customer = Customer;
    this.Notification = Notification;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return Event;
    case 1: return Customer;
    case 2: return Notification;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: Event = (com.db.myproject.mediation.avro.Event)value$; break;
    case 1: Customer = (com.db.myproject.mediation.avro.Customer)value$; break;
    case 2: Notification = (com.db.myproject.mediation.avro.Notification)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Event' field.
   * @return The value of the 'Event' field.
   */
  public com.db.myproject.mediation.avro.Event getEvent() {
    return Event;
  }

  /**
   * Sets the value of the 'Event' field.
   * @param value the value to set.
   */
  public void setEvent(com.db.myproject.mediation.avro.Event value) {
    this.Event = value;
  }

  /**
   * Gets the value of the 'Customer' field.
   * @return The value of the 'Customer' field.
   */
  public com.db.myproject.mediation.avro.Customer getCustomer() {
    return Customer;
  }

  /**
   * Sets the value of the 'Customer' field.
   * @param value the value to set.
   */
  public void setCustomer(com.db.myproject.mediation.avro.Customer value) {
    this.Customer = value;
  }

  /**
   * Gets the value of the 'Notification' field.
   * @return The value of the 'Notification' field.
   */
  public com.db.myproject.mediation.avro.Notification getNotification() {
    return Notification;
  }

  /**
   * Sets the value of the 'Notification' field.
   * @param value the value to set.
   */
  public void setNotification(com.db.myproject.mediation.avro.Notification value) {
    this.Notification = value;
  }

  /**
   * Creates a new MyEventRecord RecordBuilder.
   * @return A new MyEventRecord RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new MyEventRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyEventRecord RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new MyEventRecord RecordBuilder by copying an existing MyEventRecord instance.
   * @param other The existing instance to copy.
   * @return A new MyEventRecord RecordBuilder
   */
  public static Builder newBuilder(MyEventRecord other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for MyEventRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyEventRecord>
    implements org.apache.avro.data.RecordBuilder<MyEventRecord> {

    private com.db.myproject.mediation.avro.Event Event;
    private com.db.myproject.mediation.avro.Event.Builder EventBuilder;
    private com.db.myproject.mediation.avro.Customer Customer;
    private com.db.myproject.mediation.avro.Customer.Builder CustomerBuilder;
    private com.db.myproject.mediation.avro.Notification Notification;
    private com.db.myproject.mediation.avro.Notification.Builder NotificationBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Event)) {
        this.Event = data().deepCopy(fields()[0].schema(), other.Event);
        fieldSetFlags()[0] = true;
      }
      if (other.hasEventBuilder()) {
        this.EventBuilder = com.db.myproject.mediation.avro.Event.newBuilder(other.getEventBuilder());
      }
      if (isValidValue(fields()[1], other.Customer)) {
        this.Customer = data().deepCopy(fields()[1].schema(), other.Customer);
        fieldSetFlags()[1] = true;
      }
      if (other.hasCustomerBuilder()) {
        this.CustomerBuilder = com.db.myproject.mediation.avro.Customer.newBuilder(other.getCustomerBuilder());
      }
      if (isValidValue(fields()[2], other.Notification)) {
        this.Notification = data().deepCopy(fields()[2].schema(), other.Notification);
        fieldSetFlags()[2] = true;
      }
      if (other.hasNotificationBuilder()) {
        this.NotificationBuilder = com.db.myproject.mediation.avro.Notification.newBuilder(other.getNotificationBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MyEventRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(MyEventRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Event)) {
        this.Event = data().deepCopy(fields()[0].schema(), other.Event);
        fieldSetFlags()[0] = true;
      }
      this.EventBuilder = null;
      if (isValidValue(fields()[1], other.Customer)) {
        this.Customer = data().deepCopy(fields()[1].schema(), other.Customer);
        fieldSetFlags()[1] = true;
      }
      this.CustomerBuilder = null;
      if (isValidValue(fields()[2], other.Notification)) {
        this.Notification = data().deepCopy(fields()[2].schema(), other.Notification);
        fieldSetFlags()[2] = true;
      }
      this.NotificationBuilder = null;
    }

    /**
      * Gets the value of the 'Event' field.
      * @return The value.
      */
    public com.db.myproject.mediation.avro.Event getEvent() {
      return Event;
    }

    /**
      * Sets the value of the 'Event' field.
      * @param value The value of 'Event'.
      * @return This builder.
      */
    public Builder setEvent(com.db.myproject.mediation.avro.Event value) {
      validate(fields()[0], value);
      this.EventBuilder = null;
      this.Event = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Event' field has been set.
      * @return True if the 'Event' field has been set, false otherwise.
      */
    public boolean hasEvent() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'Event' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.db.myproject.mediation.avro.Event.Builder getEventBuilder() {
      if (EventBuilder == null) {
        if (hasEvent()) {
          setEventBuilder(com.db.myproject.mediation.avro.Event.newBuilder(Event));
        } else {
          setEventBuilder(com.db.myproject.mediation.avro.Event.newBuilder());
        }
      }
      return EventBuilder;
    }

    /**
     * Sets the Builder instance for the 'Event' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setEventBuilder(com.db.myproject.mediation.avro.Event.Builder value) {
      clearEvent();
      EventBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Event' field has an active Builder instance
     * @return True if the 'Event' field has an active Builder instance
     */
    public boolean hasEventBuilder() {
      return EventBuilder != null;
    }

    /**
      * Clears the value of the 'Event' field.
      * @return This builder.
      */
    public Builder clearEvent() {
      Event = null;
      EventBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Customer' field.
      * @return The value.
      */
    public com.db.myproject.mediation.avro.Customer getCustomer() {
      return Customer;
    }

    /**
      * Sets the value of the 'Customer' field.
      * @param value The value of 'Customer'.
      * @return This builder.
      */
    public Builder setCustomer(com.db.myproject.mediation.avro.Customer value) {
      validate(fields()[1], value);
      this.CustomerBuilder = null;
      this.Customer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Customer' field has been set.
      * @return True if the 'Customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'Customer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.db.myproject.mediation.avro.Customer.Builder getCustomerBuilder() {
      if (CustomerBuilder == null) {
        if (hasCustomer()) {
          setCustomerBuilder(com.db.myproject.mediation.avro.Customer.newBuilder(Customer));
        } else {
          setCustomerBuilder(com.db.myproject.mediation.avro.Customer.newBuilder());
        }
      }
      return CustomerBuilder;
    }

    /**
     * Sets the Builder instance for the 'Customer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setCustomerBuilder(com.db.myproject.mediation.avro.Customer.Builder value) {
      clearCustomer();
      CustomerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Customer' field has an active Builder instance
     * @return True if the 'Customer' field has an active Builder instance
     */
    public boolean hasCustomerBuilder() {
      return CustomerBuilder != null;
    }

    /**
      * Clears the value of the 'Customer' field.
      * @return This builder.
      */
    public Builder clearCustomer() {
      Customer = null;
      CustomerBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Notification' field.
      * @return The value.
      */
    public com.db.myproject.mediation.avro.Notification getNotification() {
      return Notification;
    }

    /**
      * Sets the value of the 'Notification' field.
      * @param value The value of 'Notification'.
      * @return This builder.
      */
    public Builder setNotification(com.db.myproject.mediation.avro.Notification value) {
      validate(fields()[2], value);
      this.NotificationBuilder = null;
      this.Notification = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Notification' field has been set.
      * @return True if the 'Notification' field has been set, false otherwise.
      */
    public boolean hasNotification() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'Notification' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.db.myproject.mediation.avro.Notification.Builder getNotificationBuilder() {
      if (NotificationBuilder == null) {
        if (hasNotification()) {
          setNotificationBuilder(com.db.myproject.mediation.avro.Notification.newBuilder(Notification));
        } else {
          setNotificationBuilder(com.db.myproject.mediation.avro.Notification.newBuilder());
        }
      }
      return NotificationBuilder;
    }

    /**
     * Sets the Builder instance for the 'Notification' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setNotificationBuilder(com.db.myproject.mediation.avro.Notification.Builder value) {
      clearNotification();
      NotificationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Notification' field has an active Builder instance
     * @return True if the 'Notification' field has an active Builder instance
     */
    public boolean hasNotificationBuilder() {
      return NotificationBuilder != null;
    }

    /**
      * Clears the value of the 'Notification' field.
      * @return This builder.
      */
    public Builder clearNotification() {
      Notification = null;
      NotificationBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MyEventRecord build() {
      try {
        MyEventRecord record = new MyEventRecord();
        if (EventBuilder != null) {
          record.Event = this.EventBuilder.build();
        } else {
          record.Event = fieldSetFlags()[0] ? this.Event : (com.db.myproject.mediation.avro.Event) defaultValue(fields()[0]);
        }
        if (CustomerBuilder != null) {
          record.Customer = this.CustomerBuilder.build();
        } else {
          record.Customer = fieldSetFlags()[1] ? this.Customer : (com.db.myproject.mediation.avro.Customer) defaultValue(fields()[1]);
        }
        if (NotificationBuilder != null) {
          record.Notification = this.NotificationBuilder.build();
        } else {
          record.Notification = fieldSetFlags()[2] ? this.Notification : (com.db.myproject.mediation.avro.Notification) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MyEventRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<MyEventRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MyEventRecord>
    READER$ = (org.apache.avro.io.DatumReader<MyEventRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
