/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.db.myproject.mediation.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Notification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6853223279114273364L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Notification\",\"namespace\":\"com.db.myproject.mediation.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"message\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"retries\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"nhubSuccess\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"successDescr\",\"type\":[\"null\",\"string\"],\"default\":null}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Notification> ENCODER =
      new BinaryMessageEncoder<Notification>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Notification> DECODER =
      new BinaryMessageDecoder<Notification>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Notification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Notification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Notification>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Notification to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Notification from a ByteBuffer. */
  public static Notification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence id;
  @Deprecated public CharSequence message;
  @Deprecated public Integer retries;
  @Deprecated public Boolean nhubSuccess;
  @Deprecated public Double amount;
  @Deprecated public CharSequence successDescr;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Notification() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param message The new value for message
   * @param retries The new value for retries
   * @param nhubSuccess The new value for nhubSuccess
   * @param amount The new value for amount
   * @param successDescr The new value for successDescr
   */
  public Notification(CharSequence id, CharSequence message, Integer retries, Boolean nhubSuccess, Double amount, CharSequence successDescr) {
    this.id = id;
    this.message = message;
    this.retries = retries;
    this.nhubSuccess = nhubSuccess;
    this.amount = amount;
    this.successDescr = successDescr;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return message;
    case 2: return retries;
    case 3: return nhubSuccess;
    case 4: return amount;
    case 5: return successDescr;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: message = (CharSequence)value$; break;
    case 2: retries = (Integer)value$; break;
    case 3: nhubSuccess = (Boolean)value$; break;
    case 4: amount = (Double)value$; break;
    case 5: successDescr = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public CharSequence getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'retries' field.
   * @return The value of the 'retries' field.
   */
  public Integer getRetries() {
    return retries;
  }

  /**
   * Sets the value of the 'retries' field.
   * @param value the value to set.
   */
  public void setRetries(Integer value) {
    this.retries = value;
  }

  /**
   * Gets the value of the 'nhubSuccess' field.
   * @return The value of the 'nhubSuccess' field.
   */
  public Boolean getNhubSuccess() {
    return nhubSuccess;
  }

  /**
   * Sets the value of the 'nhubSuccess' field.
   * @param value the value to set.
   */
  public void setNhubSuccess(Boolean value) {
    this.nhubSuccess = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'successDescr' field.
   * @return The value of the 'successDescr' field.
   */
  public CharSequence getSuccessDescr() {
    return successDescr;
  }

  /**
   * Sets the value of the 'successDescr' field.
   * @param value the value to set.
   */
  public void setSuccessDescr(CharSequence value) {
    this.successDescr = value;
  }

  /**
   * Creates a new Notification RecordBuilder.
   * @return A new Notification RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Notification RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Notification instance.
   * @param other The existing instance to copy.
   * @return A new Notification RecordBuilder
   */
  public static Builder newBuilder(Notification other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Notification instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Notification>
    implements org.apache.avro.data.RecordBuilder<Notification> {

    private CharSequence id;
    private CharSequence message;
    private Integer retries;
    private Boolean nhubSuccess;
    private Double amount;
    private CharSequence successDescr;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.retries)) {
        this.retries = data().deepCopy(fields()[2].schema(), other.retries);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nhubSuccess)) {
        this.nhubSuccess = data().deepCopy(fields()[3].schema(), other.nhubSuccess);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.successDescr)) {
        this.successDescr = data().deepCopy(fields()[5].schema(), other.successDescr);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Notification instance
     * @param other The existing instance to copy.
     */
    private Builder(Notification other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.retries)) {
        this.retries = data().deepCopy(fields()[2].schema(), other.retries);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nhubSuccess)) {
        this.nhubSuccess = data().deepCopy(fields()[3].schema(), other.nhubSuccess);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.successDescr)) {
        this.successDescr = data().deepCopy(fields()[5].schema(), other.successDescr);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public CharSequence getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public Builder setMessage(CharSequence value) {
      validate(fields()[1], value);
      this.message = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public Builder clearMessage() {
      message = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'retries' field.
      * @return The value.
      */
    public Integer getRetries() {
      return retries;
    }

    /**
      * Sets the value of the 'retries' field.
      * @param value The value of 'retries'.
      * @return This builder.
      */
    public Builder setRetries(Integer value) {
      validate(fields()[2], value);
      this.retries = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'retries' field has been set.
      * @return True if the 'retries' field has been set, false otherwise.
      */
    public boolean hasRetries() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'retries' field.
      * @return This builder.
      */
    public Builder clearRetries() {
      retries = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'nhubSuccess' field.
      * @return The value.
      */
    public Boolean getNhubSuccess() {
      return nhubSuccess;
    }

    /**
      * Sets the value of the 'nhubSuccess' field.
      * @param value The value of 'nhubSuccess'.
      * @return This builder.
      */
    public Builder setNhubSuccess(Boolean value) {
      validate(fields()[3], value);
      this.nhubSuccess = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'nhubSuccess' field has been set.
      * @return True if the 'nhubSuccess' field has been set, false otherwise.
      */
    public boolean hasNhubSuccess() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'nhubSuccess' field.
      * @return This builder.
      */
    public Builder clearNhubSuccess() {
      nhubSuccess = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public Builder setAmount(Double value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public Builder clearAmount() {
      amount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'successDescr' field.
      * @return The value.
      */
    public CharSequence getSuccessDescr() {
      return successDescr;
    }

    /**
      * Sets the value of the 'successDescr' field.
      * @param value The value of 'successDescr'.
      * @return This builder.
      */
    public Builder setSuccessDescr(CharSequence value) {
      validate(fields()[5], value);
      this.successDescr = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'successDescr' field has been set.
      * @return True if the 'successDescr' field has been set, false otherwise.
      */
    public boolean hasSuccessDescr() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'successDescr' field.
      * @return This builder.
      */
    public Builder clearSuccessDescr() {
      successDescr = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Notification build() {
      try {
        Notification record = new Notification();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.message = fieldSetFlags()[1] ? this.message : (CharSequence) defaultValue(fields()[1]);
        record.retries = fieldSetFlags()[2] ? this.retries : (Integer) defaultValue(fields()[2]);
        record.nhubSuccess = fieldSetFlags()[3] ? this.nhubSuccess : (Boolean) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (Double) defaultValue(fields()[4]);
        record.successDescr = fieldSetFlags()[5] ? this.successDescr : (CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Notification>
    WRITER$ = (org.apache.avro.io.DatumWriter<Notification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Notification>
    READER$ = (org.apache.avro.io.DatumReader<Notification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
